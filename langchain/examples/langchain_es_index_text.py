import os

os.environ['OPENAI_API_KEY'] = ""

from langchain.docstore.document import Document
from langchain.text_splitter import CharacterTextSplitter
from langchain.embeddings import OpenAIEmbeddings
from langchain.vectorstores import ElasticVectorSearch

text = """ ---
title: Disputes
desc: List of Dispute APIs available to perform various actions.
layout: api
---

<banner country='MY' desc='Disputes is not available in [[country]].' />

A <a href="/docs/payments/disputes/" target="_blank">dispute</a> arises when your customer or the issuing bank questions the validity of a payment.

You can try out our APIs on the Razorpay Postman Public Workspace.

<a href="https://www.postman.com/razorpaydev/workspace/razorpay-public-workspace/folder/12492020-49fdb1f6-7e7d-426c-b7b4-3dd468d8565e" target="_blank">![Run in Postman](https://run.pstmn.io/button.svg)</a>

# Use Cases

- [Accept a dispute](#accept-a-dispute) against the payment.
- [Contest a dispute](#contest-a-dispute) with explanations and supporting documents to submit evidences.
- [Retrieve information about all disputes](#fetch-all-disputes).
- [Retrieve details for a specific dispute](#fetch-a-dispute) using the unique identifier linked to the dispute. 

# Dispute Entity

The Disputes entity has the following fields:

`id`
: `string` The unique identifier of the dispute generated by Razorpay. For example, `disp_AHfqOvkldwsbqt`.

`entity`
: `string` Indicates the type of entity. In this case, it is `dispute`.

`payment_id`
: `string` The unique identifier of the payment against which the dispute was created. For example, `pay_EsyWjHrfzb59eR`.

`amount`
: `integer` Amount, in currency subunits, for which the dispute was created.<br/>

`currency`
: `string` 3-letter ISO currency code associated with the amount. Check the list of <a href="/docs/international-payments/#supported-currencies" target="_blank"> supported currencies</a>.
"""

documents = Document(page_content=text)

text_splitter = CharacterTextSplitter(chunk_size=100, chunk_overlap=0)
texts = text_splitter.split_documents([documents])

print("TEXT123: ", len(texts), " //END")

embedding = OpenAIEmbeddings()
db = ElasticVectorSearch.from_documents(documents=texts, 
        embedding=embedding, 
        elasticsearch_url="http://localhost:9200")

query = "What all APIs are supported in dispute?"
docs = db.similarity_search(query)

print(docs[0].page_content)